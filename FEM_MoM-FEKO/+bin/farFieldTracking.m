function CMA = farFieldTracking(CMA)
% FARFIELDTRACKING: characteristic mode tracking based on far fields
% This file also sorts the samples with respect to the frequency.
% 
% Inputs:
%   CMA ~    data structure generated by FEKO_SD.m containing all
%            informations neede (scattering dyadics, characteristic
%            vectors, characteristic numbers, etc.).
% 
% Outputs:
%    Fn_ ~ tracked characteristic vectors (far fields)
%    tn_ ~ tracked characteristic numbers
% 
% (c) 2022-2024, Miloslav Capek, CTU in Prague, miloslav.capek@fel.cvut.cz

const = bin.constants();

% Sort the data with respect to the frequency:
[~, ind] = sort(CMA.k0);
CMA.Fn_orig = CMA.Fn_orig(:, :, ind);
CMA.tn_orig = CMA.tn_orig(:, ind);
CMA.k0      = CMA.k0(ind);

% Sort fields proprietary to iterative solver
if isfield(CMA, 'Info')
    CMA.Info    = CMA.Info(ind);
end

% Set the range for tracking
[~, Nm, Nf]  = size(CMA.Fn_orig);

% Perform tracking (only in the case of having more than one sample)
if Nf > 1
    IND = nan(Nm, Nf);
    IND(:, 1) = (1:Nm).';
    for n = 1:(Nf-1)
        % Correlation between far fields in terms of radiated power.
        % The actual frequency points are reindexed.
        T = 1/(2*const.Z0) * ...
            abs(CMA.Fn_orig(:,IND(:, n),n)'*CMA.W*CMA.Fn_orig(:,:,n+1));
        
        % Check all rows of T and find the highest (unused) correlation.
        posPlaces = 1:Nm;
        for md = 1:Nm
            [~, pos] = max(T(md, posPlaces));    
            IND(md, n+1)   = posPlaces(pos);
            posPlaces(pos) = [];
        end
    end
else
    IND = (1:Nm).'; % = do nothing
end

% Reorder data according precalculated correlation table
CMA.Fn = nan(size(CMA.Fn_orig));
CMA.tn = nan(size(CMA.tn_orig));
for n = 1:Nf
    CMA.Fn(:, :, n) = CMA.Fn_orig(:, IND(:, n), n);
    CMA.tn(:, n)    = CMA.tn_orig(IND(:, n), n);
end